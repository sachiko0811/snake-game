[{"/Users/SACHIKO/Desktop/works/snake-game/src/index.js":"1","/Users/SACHIKO/Desktop/works/snake-game/src/App.js":"2","/Users/SACHIKO/Desktop/works/snake-game/src/components/ManipulationPanel.jsx":"3","/Users/SACHIKO/Desktop/works/snake-game/src/components/Field.jsx":"4","/Users/SACHIKO/Desktop/works/snake-game/src/components/Navigation.jsx":"5","/Users/SACHIKO/Desktop/works/snake-game/src/components/Button.jsx":"6","/Users/SACHIKO/Desktop/works/snake-game/src/utils/index.js":"7"},{"size":506,"mtime":1611198848720,"results":"8","hashOfConfig":"9"},{"size":6579,"mtime":1613909112259,"results":"10","hashOfConfig":"9"},{"size":1213,"mtime":1613911048079,"results":"11","hashOfConfig":"9"},{"size":465,"mtime":1611198663240,"results":"12","hashOfConfig":"9"},{"size":1645,"mtime":1613909459263,"results":"13","hashOfConfig":"9"},{"size":891,"mtime":1613909727567,"results":"14","hashOfConfig":"9"},{"size":1185,"mtime":1613905736790,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1yxgmqc",{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/Users/SACHIKO/Desktop/works/snake-game/src/index.js",[],["33","34"],"/Users/SACHIKO/Desktop/works/snake-game/src/App.js",["35","36"],"// import React, { useEffect, useState } from 'react';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport Navigation from './components/Navigation';\nimport Field from './components/Field';\nimport Button from './components/Button';\nimport ManipulationPanel from './components/ManipulationPanel';\n// import { initFields } from './utils';\nimport { initFields, getFoodPosition } from './utils'\n\n// const fields = initFields(35)\n// fields[17][17] = 'snake'\n// fields[17][17] = 'food'\n// const initialValues = initFields(35)\nconst initialPosition = { x: 17, y: 17 }\nconst initialValues = initFields(35, initialPosition)\nconst defaultInterval =  100\nconst defaultDifficulty = 3\n\nconst Difficulty = [1000, 500, 100, 50, 10]\n\n// initialValues[9][9] = 'food'\n\n const GameStatus = Object.freeze({\n  init:  'init',\n  playing: 'playing',\n  suspended: 'suspended',\n  gameover: 'gameover'\n})\n\nexport const Direction = Object.freeze({\n  up: 'up',\n  right: 'right',\n  left: 'left',\n  down:'down'\n})\n\nconst DirectionKeyCodeMap = Object.freeze({\n  37: Direction.left,\n  38: Direction.up,\n  39: Direction.right,\n  40: Direction.down,\n})\n\nconst OppositeDirection = Object.freeze({\n  up: 'down',\n  right: 'left',\n  left: 'right',\n  down: 'up'\n})\n\nconst Delta = Object.freeze({\n  up: { x: 0, y: -1 },\n  right: { x: 1, y: 0 },\n  left: { x: -1, y: 0 },\n  down: { x: 0, y: 1 },\n})\n\nlet timer = undefined\n\nconst unsubscribe  =  () => {\n  if(!timer) {\n    return\n  }\n  clearInterval(timer)\n}\n\nconst isCollision = (fieldSize, position) => {\n  if(position.y < 0 || position.x< 0) {\n    return true;\n  }\n\n  if(position.y > fieldSize - 1 || position.x > fieldSize - 1) {\n    return true;\n  }\n\n  return false;\n}\n\nconst isEatingMyself = (fields, position) => {\n  return fields[position.y][position.x] === 'snake'\n}\n\nfunction App() {\n\n  const [fields, setFields] = useState(initialValues)\n  // const [position, setPosition] = useState()\n  const [body, setBody] = useState([])\n  const [status, setStatus] = useState(GameStatus.init)\n  // const [status, setStatus] = useState('init')\n  const [tick, setTick]  = useState(0)\n  const [direction, setDirection] = useState(Direction.up)\n  // const [difficulty, setDifficulty] = useState(3)\n  const [difficulty, setDifficulty] = useState(defaultDifficulty)\n\n  useEffect(() => {\n    // setPosition(initialPosition)\n    setBody([initialPosition]) //?\n    // setBody(\n    //   new Array(15).fill('').map((_item, index) => ({ x: 17, y: 17 + index })),\n    // )\n    // managing the time of this game\n    const interval = Difficulty[difficulty - 1]\n    timer = setInterval(() => {\n      // if(!position) {\n      //   return\n      // }\n      // goUp()\n      setTick(tick => tick + 1)\n    // }, defaultInterval)\n    }, interval)\n    return unsubscribe\n  // }, [])\n  },[difficulty])\n\n  useEffect(() => {\n    // if (!position || status !== GameStatus.playing) {\n      if(body.length === 0 || status !== GameStatus.playing) {\n      return\n    }\n    // goUp()\n    // const canContinue = goUp()\n    const canContinue = handleMoving()\n    if(!canContinue) {\n      setStatus(GameStatus.gameover)\n    }\n  }, [tick])\n\n  const onStart  = () => setStatus(GameStatus.playing)\n\n  const onStop = () => setStatus(GameStatus.suspended)\n\n  const onRestart = () => {\n    timer = setInterval(() => {\n      setTick(tick => tick + 1)\n    }, defaultInterval)\n    setDirection(Direction.up)\n    setStatus(GameStatus.init)\n    // setPosition(initialPosition)\n    setBody([initialPosition])\n    setFields(initFields(35, initialPosition))\n  }\n\n  // const  onChangeDirection = (newDirection) =>{\n    const onChangeDirection = useCallback((newDirection) => {\n      if(status !== GameStatus.playing) {\n        return \n      } \n      if(OppositeDirection[direction] === newDirection) {\n        return\n      }\n      setDirection(newDirection)\n    }, [direction, status])\n\n    const onChangeDifficulty = useCallback((difficulty) => {\n      if(status !== GameStatus.init) {\n        return\n      }\n      if(difficulty < 1 || difficulty > difficulty.length) {\n        return\n      }\n      setDifficulty(difficulty)\n    }, [status, difficulty])\n  \n    useEffect(() => {\n      const handleKeyDown = (e) => {\n        const newDirection = DirectionKeyCodeMap[e.keyCode];\n        if(!newDirection) {\n          return;\n        }\n\n        onChangeDirection(newDirection);\n      }\n      document.addEventListener('keydown', handleKeyDown);\n      return () => document.removeEventListener('keydown', handleKeyDown)\n    }, [onChangeDirection])\n    \n\n  // const goUp = () => {\n    const handleMoving = () => {\n    // const { x, y } = position\n    const { x, y } = body[0]\n    // const nextY = Math.max(y-1,  0)\n    // const newPosition = { x, y: y - 1}\n    const delta = Delta[direction]\n    const newPosition = {\n      x: x + delta.x,\n      y: y + delta.y\n    }\n    // if(isCollision(fields.length, newPosition)) {\n      if(isCollision(fields.length, newPosition) || isEatingMyself(fields, newPosition)) {\n      // unsubscribe()\n      return false\n    }\n    // fields[y][x] = ''\n    const newBody = [...body]\n    if(fields[newPosition.y][newPosition.x] !== 'food') {\n      const removingTrack = newBody.pop()\n      fields[removingTrack.y][removingTrack.x] = ''\n    // }\n    } else {\n      const food = getFoodPosition(fields.length, [...newBody, newPosition])\n      fields[food.y][food.x] = 'food'\n    }\n    // fields[nextY][x] = 'snake'\n    // setPosition({ x,y: nextY })\n    // fields[newPosition.y][x] = 'snake'\n    fields[newPosition.y][newPosition.x] = 'snake'\n    // setPosition(newPosition)\n    // setBody([newPosition])\n    newBody.unshift(newPosition)\n\n    setBody(newBody)\n    setFields(fields)\n    return true\n  }\n\n  // console.log('direction', direction)\n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <div className=\"title-container\">\n          <h1 className=\"title\">Snake Game</h1>\n        </div>\n        <Navigation \n        length={body.length} \n        difficulty={difficulty}\n        onChangeDifficulty={onChangeDifficulty}\n        />\n      </header>\n      <main className=\"main\">\n        <Field fields={fields} />\n      </main>\n      {/* <div style={{padding: '16px'}}>\n        <button onClick={goUp}>Up</button>\n      </div> */}\n      <footer className=\"footer\">\n        {/* <Button onStart={onStart}/> */}\n        <Button\n        status={status}\n        onStart={onStart}\n        onRestart={onRestart}\n        onStop={onStop}\n        />\n        <ManipulationPanel onChange={onChangeDirection}/>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/SACHIKO/Desktop/works/snake-game/src/components/ManipulationPanel.jsx",[],"/Users/SACHIKO/Desktop/works/snake-game/src/components/Field.jsx",[],"/Users/SACHIKO/Desktop/works/snake-game/src/components/Navigation.jsx",[],"/Users/SACHIKO/Desktop/works/snake-game/src/components/Button.jsx",[],"/Users/SACHIKO/Desktop/works/snake-game/src/utils/index.js",[],["37","38"],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":126,"column":6,"nodeType":"45","endLine":126,"endColumn":12,"suggestions":"46"},{"ruleId":"43","severity":1,"message":"47","line":162,"column":8,"nodeType":"45","endLine":162,"endColumn":28,"suggestions":"48"},{"ruleId":"39","replacedBy":"49"},{"ruleId":"41","replacedBy":"50"},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'body.length', 'handleMoving', and 'status'. Either include them or remove the dependency array.","ArrayExpression",["53"],"React Hook useCallback has an unnecessary dependency: 'difficulty'. Either exclude it or remove the dependency array.",["54"],["51"],["52"],"no-global-assign","no-unsafe-negation",{"desc":"55","fix":"56"},{"desc":"57","fix":"58"},"Update the dependencies array to be: [body.length, handleMoving, status, tick]",{"range":"59","text":"60"},"Update the dependencies array to be: [status]",{"range":"61","text":"62"},[3120,3126],"[body.length, handleMoving, status, tick]",[4107,4127],"[status]"]