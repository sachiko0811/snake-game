{"version":3,"sources":["components/Navigation.jsx","components/Field.jsx","components/Button.jsx","components/ManipulationPanel.jsx","utils/index.js","App.js","index.js"],"names":["Navigation","length","difficulty","onChangeDifficulty","upVisibility","downVisibility","className","onClick","Field","fields","map","row","column","Button","status","onStart","onRestart","onStop","ManipulationPanel","onChange","icon","faArrowLeft","faArrowUp","faArrowDown","faArrowRight","getFoodPosition","fieldSize","excludes","x","Math","floor","random","y","some","item","initFields","snake","i","cols","Array","fill","push","food","initialPosition","initialValues","Difficulty","GameStatus","Object","freeze","init","playing","suspended","gameover","Direction","up","right","left","down","DirectionKeyCodeMap","37","38","39","40","OppositeDirection","Delta","timer","undefined","unsubscribe","clearInterval","App","useState","setFields","body","setBody","setStatus","tick","setTick","direction","setDirection","setDifficulty","useEffect","setInterval","handleMoving","onChangeDirection","useCallback","newDirection","handleKeyDown","e","keyCode","document","addEventListener","removeEventListener","position","delta","newPosition","isEatingMyself","newBody","removingTrack","pop","unshift","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.896b6ee9.chunk.js","sourcesContent":["import React from 'react';\n\n\n// const Navigation = () => {\n//     return <p>navi</p>\n// }\n\nconst Navigation = ({ length, difficulty = 3, onChangeDifficulty }) => {\n\n    const upVisibility = difficulty < 5 ? '' : 'is-hidden'\n    const downVisibility = difficulty >  1 ? '' : 'is- hidden'\n    const onUpDifficulty = () => onChangeDifficulty(difficulty + 1)\n    const onDownDifficulty = () => onChangeDifficulty(difficulty - 1)\n    return (\n        <div className=\"navigation\">\n            <div className=\"navigation-item\">\n                <span className=\"navigation-label\">Length: </span>\n                <div className=\"navigation-item-number-container\">\n                    <div className=\"num-board\">{length}</div>\n                </div>\n            </div>\n            <div className=\"navigation-item\">\n                <span className=\"navigation-label\">Difficulty: </span>\n                <div className=\"navigation-item-number-container\">\n                    <span className=\"num-board\">{difficulty}</span>\n                    <div className=\"difficulty-button-container\">\n                        <div \n                        className={`difficulty-button difficulty-up ${upVisibility}`}\n                        onClick={onUpDifficulty}\n                        >\n                        </div>\n                        <div\n                        className={`difficulty-button difficulty-down ${downVisibility}`}\n                        onClick={onDownDifficulty}\n                        >\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Navigation;","import React from 'react';\n\nconst Field = ({ fields }) => {\n    return (\n        <div className=\"field\">\n            {\n                // new Array(35 * 35).fill('').map(()=> <div className=\"dots\"></div>)\n                fields.map((row) => {\n                    return row.map((column) => {\n                        return <div className={`dots ${column}`}></div>\n                    })\n                })\n            }\n        </div>\n    )\n}\n\nexport default Field\n","import React from 'react'\n\n// const Button = ({ onStart }) => {\n   const Button = ({ status, onStart, onRestart, onStop }) => {\n       return (\n           <div className=\"button\">\n               {/* {\n                   status === \"gameover\" ? <button onClick={onRestart}>gameover</button>\n                   :\n                   <button onClick={onStart}>start</button>\n               } */}\n               { status === \"gameover\" && <button className=\"btn btn-gameover\" onClick={onRestart}>gameover</button>}\n               { status === \"init\" && <button className=\"btn btn-init\" onClick={onStart}>start</button>}\n               { status === \"suspended\" && <button className=\"btn btn-suspended\" onClick={onStart}>start</button>}\n               { status === \"playing\" && <button className=\"btn btn-playing\" onClick={onStop}>stop</button>}\n           </div>\n       )\n}\n\nexport default Button;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n    faArrowLeft,\n    faArrowUp,\n    faArrowDown,\n    faArrowRight\n} from '@fortawesome/free-solid-svg-icons'\n\nconst ManipulationPanel = ({ onChange }) => {\n    const onUp = () => onChange('up')\n    const onRight = () => onChange('right')\n    const onLeft = () => onChange('left')\n    const onDown = () => onChange('down')\n\n    return (\n        <div className=\"manipulation-panel\">\n            <button className=\"manipulation-btn btn btn-left\" onClick={onLeft}>\n                <FontAwesomeIcon icon={faArrowLeft} />\n            </button>\n            <div>\n            <button className=\"manipulation-btn btn btn-up\" onClick={onUp}>\n                <FontAwesomeIcon icon={faArrowUp} />\n            </button>    \n            <button className=\"manipulation-btn btn btn-down\" onClick={onDown}>\n                <FontAwesomeIcon icon={faArrowDown} />\n            </button>    \n            </div>\n            <button className=\"manipulation-btn btn btn-right\" onClick={onRight}>\n                <FontAwesomeIcon icon={faArrowRight} />\n            </button>    \n        </div>\n    )\n}\n\nexport default ManipulationPanel\n","// const getFoodPosition = (fieldSize) => {\n//     const x = Math.floor(Math.random() * (fieldSize - 1)) + 1;\n//     const y = Math.floor(Math.random() * (fieldSize -1)) + 1;\n//     return { x, y};\n// }\n\n// const getFoodPosition = (fieldSize, excludes) =>  {\n    export const getFoodPosition = (fieldSize, excludes) => {\n    while(true) {\n    const x = Math.floor(Math.random() * (fieldSize - 1)) + 1;\n    const y = Math.floor(Math.random() * (fieldSize -1)) + 1;\n    const conflict = excludes.some(item => item.x === x && item.y === y)\n\n    if(!conflict) {\n        return { x, y };\n    }\n  }\n}\n\n// export const initFields = (fieldSize, initialPosition) => {\nexport const initFields = (fieldSize, snake) => {\n    const fields = []\n    for (let i = 0; i < fieldSize; i++) {\n        const cols = new Array(fieldSize).fill('')\n        fields.push(cols)\n    }\n    fields[17][17] = 'snake'\n    // fields[initialPosition.y][initialPosition.x] =  'snake'\n    fields[snake.y][snake.x] = 'snake'\n\n    // const food = getFoodPosition(fieldSize)\n    const food = getFoodPosition(fieldSize, [snake])\n    fields[food.y][food.x] = 'food'; \n\n    return fields // gonna return an array that you made\n}","// import React, { useEffect, useState } from 'react';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport Navigation from './components/Navigation';\nimport Field from './components/Field';\nimport Button from './components/Button';\nimport ManipulationPanel from './components/ManipulationPanel';\n// import { initFields } from './utils';\nimport { initFields, getFoodPosition } from './utils'\n\n// const fields = initFields(35)\n// fields[17][17] = 'snake'\n// fields[17][17] = 'food'\n// const initialValues = initFields(35)\nconst initialPosition = { x: 17, y: 17 }\nconst initialValues = initFields(35, initialPosition)\nconst defaultInterval =  100\nconst defaultDifficulty = 3\n\nconst Difficulty = [1000, 500, 100, 50, 10]\n\n// initialValues[9][9] = 'food'\n\n const GameStatus = Object.freeze({\n  init:  'init',\n  playing: 'playing',\n  suspended: 'suspended',\n  gameover: 'gameover'\n})\n\nexport const Direction = Object.freeze({\n  up: 'up',\n  right: 'right',\n  left: 'left',\n  down:'down'\n})\n\nconst DirectionKeyCodeMap = Object.freeze({\n  37: Direction.left,\n  38: Direction.up,\n  39: Direction.right,\n  40: Direction.down,\n})\n\nconst OppositeDirection = Object.freeze({\n  up: 'down',\n  right: 'left',\n  left: 'right',\n  down: 'up'\n})\n\nconst Delta = Object.freeze({\n  up: { x: 0, y: -1 },\n  right: { x: 1, y: 0 },\n  left: { x: -1, y: 0 },\n  down: { x: 0, y: 1 },\n})\n\nlet timer = undefined\n\nconst unsubscribe  =  () => {\n  if(!timer) {\n    return\n  }\n  clearInterval(timer)\n}\n\nconst isCollision = (fieldSize, position) => {\n  if(position.y < 0 || position.x< 0) {\n    return true;\n  }\n\n  if(position.y > fieldSize - 1 || position.x > fieldSize - 1) {\n    return true;\n  }\n\n  return false;\n}\n\nconst isEatingMyself = (fields, position) => {\n  return fields[position.y][position.x] === 'snake'\n}\n\nfunction App() {\n\n  const [fields, setFields] = useState(initialValues)\n  // const [position, setPosition] = useState()\n  const [body, setBody] = useState([])\n  const [status, setStatus] = useState(GameStatus.init)\n  // const [status, setStatus] = useState('init')\n  const [tick, setTick]  = useState(0)\n  const [direction, setDirection] = useState(Direction.up)\n  // const [difficulty, setDifficulty] = useState(3)\n  const [difficulty, setDifficulty] = useState(defaultDifficulty)\n\n  useEffect(() => {\n    // setPosition(initialPosition)\n    setBody([initialPosition]) //?\n    // setBody(\n    //   new Array(15).fill('').map((_item, index) => ({ x: 17, y: 17 + index })),\n    // )\n    // managing the time of this game\n    const interval = Difficulty[difficulty - 1]\n    timer = setInterval(() => {\n      // if(!position) {\n      //   return\n      // }\n      // goUp()\n      setTick(tick => tick + 1)\n    // }, defaultInterval)\n    }, interval)\n    return unsubscribe\n  // }, [])\n  },[difficulty])\n\n  useEffect(() => {\n    // if (!position || status !== GameStatus.playing) {\n      if(body.length === 0 || status !== GameStatus.playing) {\n      return\n    }\n    // goUp()\n    // const canContinue = goUp()\n    const canContinue = handleMoving()\n    if(!canContinue) {\n      setStatus(GameStatus.gameover)\n    }\n  }, [tick])\n\n  const onStart  = () => setStatus(GameStatus.playing)\n\n  const onStop = () => setStatus(GameStatus.suspended)\n\n  const onRestart = () => {\n    timer = setInterval(() => {\n      setTick(tick => tick + 1)\n    }, defaultInterval)\n    setDirection(Direction.up)\n    setStatus(GameStatus.init)\n    // setPosition(initialPosition)\n    setBody([initialPosition])\n    setFields(initFields(35, initialPosition))\n  }\n\n  // const  onChangeDirection = (newDirection) =>{\n    const onChangeDirection = useCallback((newDirection) => {\n      if(status !== GameStatus.playing) {\n        return \n      } \n      if(OppositeDirection[direction] === newDirection) {\n        return\n      }\n      setDirection(newDirection)\n    }, [direction, status])\n\n    const onChangeDifficulty = useCallback((difficulty) => {\n      if(status !== GameStatus.init) {\n        return\n      }\n      if(difficulty < 1 || difficulty > difficulty.length) {\n        return\n      }\n      setDifficulty(difficulty)\n    }, [status, difficulty])\n  \n    useEffect(() => {\n      const handleKeyDown = (e) => {\n        const newDirection = DirectionKeyCodeMap[e.keyCode];\n        if(!newDirection) {\n          return;\n        }\n\n        onChangeDirection(newDirection);\n      }\n      document.addEventListener('keydown', handleKeyDown);\n      return () => document.removeEventListener('keydown', handleKeyDown)\n    }, [onChangeDirection])\n    \n\n  // const goUp = () => {\n    const handleMoving = () => {\n    // const { x, y } = position\n    const { x, y } = body[0]\n    // const nextY = Math.max(y-1,  0)\n    // const newPosition = { x, y: y - 1}\n    const delta = Delta[direction]\n    const newPosition = {\n      x: x + delta.x,\n      y: y + delta.y\n    }\n    // if(isCollision(fields.length, newPosition)) {\n      if(isCollision(fields.length, newPosition) || isEatingMyself(fields, newPosition)) {\n      // unsubscribe()\n      return false\n    }\n    // fields[y][x] = ''\n    const newBody = [...body]\n    if(fields[newPosition.y][newPosition.x] !== 'food') {\n      const removingTrack = newBody.pop()\n      fields[removingTrack.y][removingTrack.x] = ''\n    // }\n    } else {\n      const food = getFoodPosition(fields.length, [...newBody, newPosition])\n      fields[food.y][food.x] = 'food'\n    }\n    // fields[nextY][x] = 'snake'\n    // setPosition({ x,y: nextY })\n    // fields[newPosition.y][x] = 'snake'\n    fields[newPosition.y][newPosition.x] = 'snake'\n    // setPosition(newPosition)\n    // setBody([newPosition])\n    newBody.unshift(newPosition)\n\n    setBody(newBody)\n    setFields(fields)\n    return true\n  }\n\n  // console.log('direction', direction)\n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <div className=\"title-container\">\n          <h1 className=\"title\">Snake Game</h1>\n        </div>\n        <Navigation \n        length={body.length} \n        difficulty={difficulty}\n        onChangeDifficulty={onChangeDifficulty}\n        />\n      </header>\n      <main className=\"main\">\n        <Field fields={fields} />\n      </main>\n      {/* <div style={{padding: '16px'}}>\n        <button onClick={goUp}>Up</button>\n      </div> */}\n      <footer className=\"footer\">\n        {/* <Button onStart={onStart}/> */}\n        <Button\n        status={status}\n        onStart={onStart}\n        onRestart={onRestart}\n        onStop={onStop}\n        />\n        <ManipulationPanel onChange={onChangeDirection}/>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}