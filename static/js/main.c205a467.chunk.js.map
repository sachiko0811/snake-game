{"version":3,"sources":["components/Navigation.jsx","components/Field.jsx","components/Button.jsx","components/ManipulationPanel.jsx","utils/index.js","App.js","index.js"],"names":["Navigation","Field","fields","className","map","row","column","Button","status","onStart","onRestart","onClick","ManipulationPanel","onChange","initFields","fieldSize","initialPosition","i","cols","Array","fill","push","y","x","initialValues","GameStatus","Object","freeze","init","playing","suspended","gameover","Direction","up","right","left","down","DirectionKeyCodeMap","37","38","39","40","OppositeDirection","Delta","timer","undefined","unsubscribe","clearInterval","App","useState","setFields","position","setPosition","setStatus","tick","setTick","direction","setDirection","useEffect","setInterval","handleMoving","onChangeDirection","useCallback","newDirection","handleKeyDown","e","keyCode","document","addEventListener","removeEventListener","delta","newPosition","isCollision","length","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c205a467.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Navigation = () => {\n    return <p>navi</p>\n}\n\nexport default Navigation;","import React from 'react';\n\nconst Field = ({ fields }) => {\n    return (\n        <div className=\"field\">\n            {\n                // new Array(35 * 35).fill('').map(()=> <div className=\"dots\"></div>)\n                fields.map((row) => {\n                    return row.map((column) => {\n                        return <div className={`dots ${column}`}></div>\n                    })\n                })\n            }\n        </div>\n    )\n}\n\nexport default Field\n","import React from 'react'\n\n// const Button = ({ onStart }) => {\n   const Button = ({ status, onStart, onRestart }) => {\n       return (\n           <div className=\"button\">\n               {\n                   status === \"gameover\" ? <button onClick={onRestart}>gameover</button>\n                   :\n                   <button onClick={onStart}>start</button>\n               }\n           </div>\n       )\n}\n\nexport default Button;","import React from 'react';\n\nconst ManipulationPanel = ({ onChange }) => {\n    const onUp = () => onChange('up')\n    const onRight = () => onChange('right')\n    const onLeft = () => onChange('left')\n    const onDown = () => onChange('down')\n\n    return (\n        <div className=\"manipulation-panel\">\n            <button onClick={onLeft}>←</button>    \n            <button onClick={onUp}>↑</button>    \n            <button onClick={onDown}>↓</button>    \n            <button onClick={onRight}>→</button>    \n        </div>\n    )\n}\n\nexport default ManipulationPanel\n","export const initFields = (fieldSize, initialPosition) => {\n    const fields = []\n    for (let i = 0; i < fieldSize; i++) {\n        const cols = new Array(fieldSize).fill('')\n        fields.push(cols)\n    }\n    fields[17][17] = 'snake'\n    fields[initialPosition.y][initialPosition.x] =  'snake'\n\n    return fields\n}","// import React, { useEffect, useState } from 'react';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport Navigation from './components/Navigation';\nimport Field from './components/Field';\nimport Button from './components/Button';\nimport ManipulationPanel from './components/ManipulationPanel';\nimport { initFields } from './utils';\n\n// const fields = initFields(35)\n// fields[17][17] = 'snake'\n// fields[17][17] = 'food'\n// const initialValues = initFields(35)\nconst initialPosition = { x: 17, y: 17 }\nconst initialValues = initFields(35, initialPosition)\nconst defaultInterval =  100\n\n const GameStatus = Object.freeze({\n  init:  'init',\n  playing: 'playing',\n  suspended: 'suspended',\n  gameover: 'gameover'\n})\n\nexport const Direction = Object.freeze({\n  up: 'up',\n  right: 'right',\n  left: 'left',\n  down:'down'\n})\n\nconst DirectionKeyCodeMap = Object.freeze({\n  37: Direction.left,\n  38: Direction.up,\n  39: Direction.right,\n  40: Direction.down,\n})\n\nconst OppositeDirection = Object.freeze({\n  up: 'down',\n  right: 'left',\n  left: 'right',\n  down: 'up'\n})\n\nconst Delta = Object.freeze({\n  up: { x: 0, y: -1 },\n  right: { x: 1, y: 0 },\n  left: { x: -1, y: 0 },\n  down: { x: 0, y: 1 },\n})\n\nlet timer = undefined\n\nconst unsubscribe  =  () => {\n  if(!timer) {\n    return\n  }\n  clearInterval(timer)\n}\n\nconst isCollision = (fieldSize, position) => {\n  if(position.y < 0 || position.x< 0) {\n    return true;\n  }\n\n  if(position.y > fieldSize - 1 || position.x > fieldSize - 1) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction App() {\n\n  const [fields, setFields] = useState(initialValues)\n  const [position, setPosition] = useState()\n  const [status, setStatus] = useState(GameStatus.init)\n  // const [status, setStatus] = useState('init')\n  const [tick, setTick]  = useState(0)\n  const [direction, setDirection] = useState(Direction.up)\n\n  useEffect(() => {\n    setPosition(initialPosition)\n    // managing the time of this game\n    timer = setInterval(() => {\n      // if(!position) {\n      //   return\n      // }\n      // goUp()\n      setTick(tick => tick + 1)\n    }, defaultInterval)\n    return unsubscribe\n  }, [])\n\n  useEffect(() => {\n    if (!position || status !== GameStatus.playing) {\n      return\n    }\n    // goUp()\n    // const canContinue = goUp()\n    const canContinue = handleMoving()\n    if(!canContinue) {\n      setStatus(GameStatus.gameover)\n    }\n  }, [tick])\n\n  const onStart  = () => setStatus(GameStatus.playing)\n\n  const onRestart = () => {\n    timer = setInterval(() => {\n      setTick(tick => tick + 1)\n    }, defaultInterval)\n    setDirection(Direction.up)\n    setStatus(GameStatus.init)\n    setPosition(initialPosition)\n    setFields(initFields(35, initialPosition))\n  }\n\n  // const  onChangeDirection = (newDirection) =>{\n    const onChangeDirection = useCallback((newDirection) => {\n      if(status !== GameStatus.playing) {\n        return \n      } \n      if(OppositeDirection[direction] === newDirection) {\n        return\n      }\n      setDirection(newDirection)\n    }, [direction, status])\n  \n    useEffect(() => {\n      const handleKeyDown = (e) => {\n        const newDirection = DirectionKeyCodeMap[e.keyCode];\n        if(!newDirection) {\n          return;\n        }\n\n        onChangeDirection(newDirection);\n      }\n      document.addEventListener('keydown', handleKeyDown);\n      return () => document.removeEventListener('keydown', handleKeyDown)\n    }, [onChangeDirection])\n    \n\n  // const goUp = () => {\n    const handleMoving = () => {\n    const { x, y } = position\n    // const nextY = Math.max(y-1,  0)\n    // const newPosition = { x, y: y - 1}\n    const delta = Delta[direction]\n    const newPosition = {\n      x: x + delta.x,\n      y: y + delta.y\n    }\n    if(isCollision(fields.length, newPosition)) {\n      // unsubscribe()\n      return false\n    }\n    fields[y][x] = ''\n    // fields[nextY][x] = 'snake'\n    // setPosition({ x,y: nextY })\n    // fields[newPosition.y][x] = 'snake'\n    fields[newPosition.y][newPosition.x] = 'snake'\n    setPosition(newPosition)\n    setFields(fields)\n    return true\n  }\n\n  // console.log('direction', direction)\n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <div className=\"title-container\">\n          <h1 className=\"title\">Snake Game</h1>\n        </div>\n        <Navigation />\n      </header>\n      <main className=\"main\">\n        <Field fields={fields} />\n      </main>\n      {/* <div style={{padding: '16px'}}>\n        <button onClick={goUp}>Up</button>\n      </div> */}\n      <footer className=\"footer\">\n        {/* <Button onStart={onStart}/> */}\n        <Button\n        status={status}\n        onStart={onStart}\n        onRestart={onRestart}\n        />\n        <ManipulationPanel onChange={onChangeDirection}/>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}